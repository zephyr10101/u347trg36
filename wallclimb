local distanceThreshold = 6  -- Maximum distance to detect walls
local trussOffset = Vector3.new(-0.8, 0, 0)  -- Offset position for the truss

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

local trussPart = nil -- Variable to hold the created truss part
local isClimbing = false -- Track whether the character is currently climbing
local previousTouchedPart = nil -- Variable to store the previously touched part

local function createTruss(position, normal)
	if trussPart then
		-- If a truss part already exists, remove it before creating a new one
		trussPart:Destroy()
		trussPart = nil
	end

	trussPart = Instance.new("TrussPart")
	trussPart.Anchored = true
	trussPart.Transparency = .5
	trussPart.Size = Vector3.new(2, 4, 2)

	-- Calculate the offset position in front of the character
	local offsetPosition = position + (normal * trussOffset)
	trussPart.Position = offsetPosition
	trussPart.Parent = workspace

	-- Adjust the truss orientation to match the wall
	trussPart.CFrame = CFrame.new(offsetPosition, offsetPosition + normal)
end

local function destroyTruss()
	if trussPart then
		trussPart:Destroy()
		trussPart = nil
	end
end

local function isTruss(part)
	-- Check if the part is a truss by testing its ClassName
	return part.ClassName == "TrussPart"
end

local function climbWall()
	if isClimbing or trussPart then
		return
	end

	isClimbing = true

	local origin = rootPart.Position
	local direction = rootPart.CFrame.LookVector
	local raycastParams = RaycastParams.new()
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
	raycastParams.FilterDescendantsInstances = {character}

	local result = workspace:Raycast(origin, direction * distanceThreshold, raycastParams)
	if result and not isTruss(result.Instance) then
		local position = result.Position
		local normal = result.Normal
		createTruss(position, normal)

		-- Disable character controls temporarily
		humanoid:ChangeState(Enum.HumanoidStateType.Physics)

		-- Re-enable character controls after a delay
		wait(0.1)
		humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
		wait(0.1)
		humanoid:ChangeState(Enum.HumanoidStateType.Running)

		-- Store the touched part for comparison
		previousTouchedPart = result.Instance
	end

	isClimbing = false
end

-- Create GUI and button
local playerGui = player:WaitForChild("PlayerGui")
local gui = Instance.new("ScreenGui")
gui.ResetOnSpawn = false
gui.Parent = playerGui

local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 100, 0, 50)
button.Position = UDim2.new(0.5, -50, 0.8, -25)
button.BackgroundColor3 = Color3.fromRGB(0, 25, 38)
button.TextColor3 = Color3.fromRGB(255, 255, 255)
button.Text = "Wall Climb (C)"
button.Parent = gui

-- Button event
button.MouseButton1Click:Connect(function()
	climbWall()
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, processed)
	if not processed and input.KeyCode == Enum.KeyCode.C then
		climbWall()
	end
end)

-- Loop to update truss position and check distance
while true do
	if trussPart then
		trussPart.Position = Vector3.new(trussPart.Position.X, rootPart.Position.Y, trussPart.Position.Z)
		local distance = (trussPart.Position - rootPart.Position).Magnitude
		if distance > distanceThreshold or (previousTouchedPart and rootPart.Position.Y >= previousTouchedPart.Position.Y * 2 + 4) then
			destroyTruss()
		end
	end
	wait(0.1) -- Adjust the delay as needed
end
